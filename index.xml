<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Karthik&#39;s Blog</title>
    <link>https://k-metric.github.io/</link>
    <description>Recent content on Karthik&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Apr 2021 00:07:25 +0530</lastBuildDate><atom:link href="https://k-metric.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google v. Oracle and API analogies</title>
      <link>https://k-metric.github.io/post/google-vs-oracle-judgement/</link>
      <pubDate>Fri, 16 Apr 2021 00:07:25 +0530</pubDate>
      
      <guid>https://k-metric.github.io/post/google-vs-oracle-judgement/</guid>
      
      <description>&lt;p&gt;Last weekend, to kill time, I decided to read the judgement in the recently concluded Oracle vs Google lawsuit. If you, as a programmer, do not know what this is about, here is a gist: Google re-implemented Oracle&amp;rsquo;s Java SE/ME APIs to create a runtime for Android (called Dalvik and a later iteration called ART). Oracle promptly filed a lawsuit claiming damages.&lt;/p&gt;
&lt;p&gt;The latest judgement from the U.S. Supreme court, which was delivered on April 5th, reversed an earlier lower court&amp;rsquo;s opinion and decided in favour of Google. I do not know enough about the legal system of the U.S. to say if there are going to be additional appeals. In any case, because this specific judgement is a juxtaposition of two interesting topics, technology and law, the document[1] provides for an interesting read.&lt;/p&gt;
&lt;h3 id=&#34;analogies&#34;&gt;&lt;strong&gt;Analogies&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;What I felt was particularly interesting are the analogies that both parties used to communicate  computer programming design to jurors to help them understand the concepts. APIs and program design have been compared during the course of this lawsuit to the Dewey Decimal system, travel guides, file cabinets, statutes in the legislature, etc.&lt;/p&gt;
&lt;p&gt;Although, both the majority decision and the dissenting opinion talk about program organisation as either simple or inventive respectively, it is within the context of the analogies above. So, it may be worth exploring if these analogues of API design are accurate, given that it is the substrate upon which such a substantial decision rests.&lt;/p&gt;
&lt;p&gt;All of these systems that were used as analogues to API design are hierarchically simple designs. For example, consider the Dewey decimal system, which is an organisational method to classify books in a library. The method consists of organising books into ten categories and then further subdividing each of those categories into ten sub-categories and so on [2]. The same  hierarchical categorisation applies to the rest of the analogies used as well; a file cabinet may have further compartments, a travel guide may have more specific information about localities in a city, etc.&lt;/p&gt;
&lt;p&gt;It is true that organising information into a hierarchical system of classification, begins to address the way APIs are designed. The most obvious example, which is cited several times in the judgement, is the classification of Java packages by function: the &lt;strong&gt;java.lang&lt;/strong&gt; package provides  core language constructs, whereas &lt;strong&gt;java.io&lt;/strong&gt; is concerned with IO operations and so on.&lt;/p&gt;
&lt;p&gt;But API design is so much more. The important part, in my opinion, begins when we start organising classes and methods within a package. It is at this juncture, that we are ready to apply John Locke&amp;rsquo;s model of thought, which I&amp;rsquo;ve lifted straight up from SICP [3] chapter 1,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three: 1. Combining several simple ideas into one compound one, and thus all complex ideas are made. 2. The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations. 3. The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h3 id=&#34;beyond-packages&#34;&gt;&lt;strong&gt;Beyond packages&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Everything that is learned by studying program structures, followed by some experience in building abstractions, compositions and relations are in play when this thought is applied to designing APIs. These ideas then spill out and even affect how even packages are organised.&lt;/p&gt;
&lt;p&gt;This may become obvious when we consider an example from the Java SE API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k-metric.github.io/images/arraylist-screengrab.png&#34; alt=&#34;image-20210414011935217&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example, the &lt;em&gt;AbstractCollection&lt;/em&gt; class provides &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;remove&lt;/em&gt;, &lt;em&gt;iterator&lt;/em&gt; and &lt;em&gt;size&lt;/em&gt; methods, which are required operations for any collection of numbers. The &lt;em&gt;AbstractList&lt;/em&gt; class add the requirement for a &lt;em&gt;set&lt;/em&gt; method which is required when dealing with an ordered collection of numbers (List), where you&amp;rsquo;d want to set a value at a specific rank. And ultimately the &lt;em&gt;ArrayList&lt;/em&gt; concrete class includes a bunch of methods in addition to the ones provided by it&amp;rsquo;s parents to make working with it easier.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;AbstractCollection&lt;/em&gt; class has several sub-classes apart of &lt;em&gt;AbstractList&lt;/em&gt; such as &lt;em&gt;AbstractSet&lt;/em&gt; (unordered, non-duplicate numbers), &lt;em&gt;AbstractQueue&lt;/em&gt; (numbers that can only be accessed in order), etc.&lt;/p&gt;
&lt;p&gt;Programmers know that this level of detail in design is important for non-trivial programs, because it lets us swap out, for example, a List with a Set. All a programmer has to do is to make sure that she only uses methods from a specific level of abstraction. While this example only serves to illustrate the point, this is how most non-trivial code design works in practice.&lt;/p&gt;
&lt;p&gt;Designing abstractions like these, I think, is not an easy skill to acquire. Even experienced programmers make design trade-offs constantly and keep correcting their design in the light of new information and knowledge. Most designs also require intimate knowledge of the domain that is being designed, such as computer networks (&lt;em&gt;java.net&lt;/em&gt;), security (&lt;em&gt;java.security&lt;/em&gt;) or cryptography (&lt;em&gt;java.crypto&lt;/em&gt;).&lt;/p&gt;
&lt;h3 id=&#34;a-new-analogy&#34;&gt;&lt;strong&gt;A new analogy&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I think an analogy that represents API design has to be more dynamic, as against to how it is communicated in the lawsuit, as static and unchanging. This is because real world software design in general and API design in particular is a product of conflicting and ever-changing requirements that morphs the design as we gain new knowledge and acquire new information.&lt;/p&gt;
&lt;p&gt;The closest real world classification I can think of that may appeal to a non-programmer audience is an accelerated form of classification system for living organisms.&lt;/p&gt;
&lt;p&gt;At present, on Earth, the Linnean taxonomic system, or a derivative of it, is widely used to classify plants and animals. This system of classification, which you probably remember from high school, fits living organisms into, class, order, genus and species. Every species of plants and animals on earth is placed into one of these categories.&lt;/p&gt;
&lt;p&gt;The categories assign increasingly specific attributes as we move up the ladder, until the exact species is identified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://k-metric.github.io/images/linnean-classification.png&#34; style=&#34;zoom: 67%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Image credit: &lt;a href=&#34;https://libretexts.org/&#34;&gt;https://libretexts.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our extension to this classification system, to adapt this as an analogy to API design is this: Imagine that you are a xenotaxonomist and you&amp;rsquo;ve landed on an alien planet full of abundant alien life forms. Life here has evolved independently of earth and your mission is to categorise these life forms by their attributes.&lt;/p&gt;
&lt;p&gt;You start your work enthusiastically in a small area of the planet. You start collecting hundreds of samples and analysing them. You have a good classification system going, but once in a while you come find that a new species throws your system into a tumble. Their attributes and behaviour matches none of what you seen until now. You dust-off and re-organize your system to fit this one singular organism into it. All seems well.&lt;/p&gt;
&lt;p&gt;You then move into another area of the planet and you now have to throw away most of the system and start over with all of the new information that you&amp;rsquo;ve now acquired. It takes years of patient cataloguing and classifying until you have a system that is stable. Biological classification on Earth is in this stable state, at least for plants and animals (there is still trouble with viral taxonomy).&lt;/p&gt;
&lt;p&gt;This process during the initial days of your job as xenotaxonomist, before a stable classification system is achieved, most accurately describes API design in my opinion. Granted, API design is not as large-scale as a biological classification system; at most, designers deal with hundreds of objects, not millions. But the additional complexity with program design is that objects (species) that we think we understand well sometimes change behaviours unexpectedly (due to a changing software requirement or new information) and now have to be re-classified.&lt;/p&gt;
&lt;p&gt;And the design has to be thrown out and started over on every new project on a deadline and budget.&lt;/p&gt;
&lt;h3 id=&#34;closing-thoughts&#34;&gt;Closing Thoughts&lt;/h3&gt;
&lt;p&gt;In my opinion, API design is non-trivial, and there is no merit to some claims that there is only one way to express a given requirement in API. A different xenotaxonomist could have completely different criteria to organise life forms, for example.&lt;/p&gt;
&lt;p&gt;Still, I think the judgement was correct because it is fair. Standard library APIs are a special case amongst APIs in general because, developers spends a substantial portion of their career learning and using it. They do so under the faith that the APIs could be extended in the future, to be used in contexts that aren&amp;rsquo;t invented yet. The developers trust that the language and API creators have good intentions. Compare this with product APIs, which are utilitarian, fleeting and no one actually cares to remember them.&lt;/p&gt;
&lt;p&gt;When Java came out, developers trusted Sun because, what was promised was an open system that developers had to only learn once. Oracle did not keep this faith, and I doubt if programming languages or core APIs that Oracle may choose to build now, will see the same level of developer adoption as Java did. Oracle is in the product business anyway, so I doubt if it even cares.&lt;/p&gt;
&lt;p&gt;On the other hand, the judgement has held that declaring code is copyright-able, but Google&amp;rsquo;s use of declaring code was fair. In doing so, in my opinion, it has lowered the bar for what is considered fair use. If this case is allowed to be used as a precedent, then this opens the door to a future, where large firms, such as Google and Oracle, may use this bar, to compete unfairly with their upstart competition. Only time will tell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opinion of the court; Oracle vs Google &lt;a href=&#34;https://www.supremecourt.gov/opinions/20pdf/18-956_d18f.pdf&#34;&gt;https://www.supremecourt.gov/opinions/20pdf/18-956_d18f.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dewey Decimal classes &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Dewey_Decimal_classes&#34;&gt;https://en.wikipedia.org/wiki/List_of_Dewey_Decimal_classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs &lt;a href=&#34;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-9.html#%25_chap_1&#34;&gt;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-9.html#%_chap_1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://k-metric.github.io/about/</link>
      <pubDate>Mon, 12 Apr 2021 01:18:09 +0530</pubDate>
      
      <guid>https://k-metric.github.io/about/</guid>
      
      <description>&lt;p&gt;My name is Karthik.&lt;/p&gt;
&lt;p&gt;I am Infrastructure engineer for the most part.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://k-metric.github.io/post/first-post/</link>
      <pubDate>Mon, 12 Apr 2021 01:11:44 +0530</pubDate>
      
      <guid>https://k-metric.github.io/post/first-post/</guid>
      
      <description>&lt;p&gt;Testing Hugo. We are using Hugo with Typora to edit posts and the Texify theme.&lt;/p&gt;
&lt;p&gt;Code block looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;We are up on Hugo with Texify theme.&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>

